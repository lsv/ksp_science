<?php

namespace Ksp\ScienceBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Ksp\ScienceBundle\Entity;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * ScienceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Science extends EntityRepository
{

    private $errorFile = '/../../../../../biomeErrors.log';

    private function __(\SimpleXMLElement $element)
    {
        return (string)$element;
    }

    public function parseScienceFile(UploadedFile $file)
    {
        $xml = $this->parseFile($file, 'science');
        if ($xml === false) {
            return false;
        }

        foreach($xml->EXPERIMENT_DEFINITION as $experiment) {
            /** @var \SimpleXMLElement $experiments */
            $tech = new Entity\Tech;
            $tech
                ->setName($this->__($experiment->title))
                ->setKspkey($this->__($experiment->id))
            ;
            $this->getEntityManager()->persist($tech);

            foreach($experiment->RESULTS->children() as $result) {
                /** @var \SimpleXMLElement $result */
                if ($result->getName() === 'default') continue;

                $biome = $this->getEntityManager()->getRepository('KspScienceBundle:Biome')->findOneBy(array('kspkey' => $result->getName()));
                if ($biome instanceof Entity\Biome) {
                    $science = new Entity\Science;
                    $science
                        ->setBiome($biome)
                        ->setTech($tech);
                    $this->getEntityManager()->persist($science);
                } else {
                    file_put_contents(__DIR__ . $this->errorFile, $result->getName() . "\n", FILE_APPEND);
                }
            }
        }

        exit;

    }

    public function parsePersistentFile(UploadedFile $file)
    {
        $xml = $this->parseFile($file, 'persistent');
        if ($xml === false) {
            return false;
        }
    }

    /**
     * @param UploadedFile $file
     * @param $root
     * @return \SimpleXMLElement|false
     */
    private function parseFile(UploadedFile $file, $root)
    {
        $xml = new \XMLWriter;
        $xml->openMemory();

        $xml->startDocument();
        $xml->startElement($root);

        $content = file_get_contents($file->getRealPath());

        $lastLine = '';
        $lines = explode("\n", $content);
        foreach($lines as $line) {
            $line = trim($line);
            if ($line == '') continue;
            if (strpos($line, '//') === 0) continue;

            if (strpos($line, '=') !== false) {
                list($key,$value) = explode('=', $line);
                $xml->startElement(trim($key));
                $xml->writeCdata(trim($value));
                $xml->endElement();
            }

            if ($line === '{') {
                $xml->startElement($lastLine);
            }

            if ($line === '}') {
                $xml->endElement();
            }

            $lastLine = $line;
        }

        $xml->endElement();

        libxml_use_internal_errors(true);
        $xml = simplexml_load_string($xml->outputMemory(true));
        if (libxml_get_errors()) {
            return false;
        }

        return $xml;

    }
}
